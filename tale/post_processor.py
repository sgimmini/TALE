from content import Content
from bs4 import BeautifulSoup

class PostProcessor:
    """
    The class which processes the content generated by the Summarizer class.
    Attributes:
        content (Content) : The content to be processed
    """
    content = Content('', [''], [''])

    def __init__(self, content):
        """
        The constructor for the PostProcessor class.
        Attributes:
            content (Content) : The content to be processed
        """
        self.content = content
        return


    def generateHtml(self):
        """
        Generates a html string from the content.
        Returns:
            html (str) : The html string
        """
        # read html structure from html file
        dummy_html = open('.//data//dummy//website//dummy.html', 'r').read()
        # read corresponding css file
        dummy_css = open('.//data//dummy//website//dummy.css', 'r').read()

        # create a beautiful soup object
        soup = BeautifulSoup(dummy_html, 'html.parser')

        # set the title
        soup.title.string = self.content.title

        # add css to the html file
        head = soup.find('head')
        head.append(soup.new_tag('style', type='text/css'))
        head.style.append(dummy_css)

        # set the first header
        new_h1 = soup.new_tag('h1')
        new_h1['class'] = 'fire'
        new_h1.string = self.content.title
        soup.find('div', {'class': 'content'}).append(new_h1)

        # iterate over the texts, break them up after  two newlines in a row and add them as paragraphs to the div with class 'foreground' 
        for text in self.content.text:
            for paragraph in text.split('\n\n'):
                new_div = soup.new_tag('div')
                new_tag = soup.new_tag('p')
                new_tag.string = paragraph
                new_div.append(new_tag)
                new_div['class'] = 'paragraph'
                soup.find('div', {'class': 'foreground'}).append(new_div)

        return soup.prettify()
            
    def writeHtml(self, path, html):
        """
        Writes the html string into a file.
        Attributes:
            path (str) : The path to the file
            html (str) : The html string
        """
        # write the html string into a file
        open(path, 'w', encoding='utf-8').write(html)
        return
    
    def process(self, path):
        """
        Processes the content by generating a html and writing it into a file.
        """
        html = self.generateHtml()
        self.writeHtml(path + 'output.html', html)
        return


# create a main function in order to test the class
def __main__():
    # create a content object
    content = Content('', [''], [''])
    content.loadFile('.//tale//dummy//test1.json')

    # create a post processor object
    postProcessor = PostProcessor(content)
    # process the content
    postProcessor.process('.//data//output//')
    return

# call the main function
if __name__ == '__main__':
    __main__()